{"version":3,"sources":["serviceWorker.js","Menu/Menu.js","Pages/App.js","Pages/Register.js","Pages/Login.js","index.js"],"names":["Boolean","window","location","hostname","match","menu","props","className","to","style","select1","select0","App","Component","select","color","Register","state","register","name","password","cel","city","form","event","space","x","target","value","setState","invite","fetch","method","body","JSON","stringify","then","console","log","test","type","maxLength","onChange","onClick","this","Login","data","submit","ReactDOM","render","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.984187e6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\n\r\nimport './Menu.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst menu = (props) =>{\r\n    return(\r\n<div>\r\n        <nav className=\"nv\">\r\n\r\n           <ul className=\"menu\">\r\n               <li className=\"item\"><Link to=\"/Login\" style={props.select1}>Entrar</Link></li>\r\n               <li className=\"item\"><Link to=\"/Register\" style={props.select0}>Cadastrar</Link></li>    \r\n           </ul>\r\n\r\n        </nav> \r\n    </div>  \r\n    )\r\n}\r\n\r\nexport default menu;","import React, { Component } from 'react';\nimport Menu from '../Menu/Menu.js'\nimport './App.css';\n\nimport './Register.css'\nclass App extends Component{\n  render(){\n    return(\n      <div className=\"back\">\n        <Menu></Menu>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport Menu from '../Menu/Menu.js'\r\n\r\n\r\nconst select = {\r\n  color:'black'\r\n};\r\n\r\nclass Register extends Component{\r\n    state = {\r\n        register:{\r\n          name:\"\",\r\n          password:\"\",\r\n          cel:\"\",\r\n          city:\"\"\r\n        }\r\n    }\r\n\r\n    form = (event,space) => {\r\n      if(space===\"name\"){\r\n        var x = this.state.register;\r\n        x.name = event.target.value;\r\n        this.setState({register:x});\r\n      }\r\n\r\n      if(space===\"password\"){\r\n        x = this.state.register;\r\n        x.password = event.target.value;\r\n        this.setState({register:x});\r\n      }\r\n\r\n      if(space===\"telephone\"){\r\n        x = this.state.register;\r\n        x.cel = event.target.value;\r\n        this.setState({register:x});\r\n      }\r\n\r\n      if(space===\"city\"){\r\n        x = this.state.register;\r\n        x.city = event.target.value;\r\n        this.setState({register:x});\r\n      }\r\n    \r\n    \r\n    }\r\n    \r\n    \r\n    invite = () => {\r\n    var register = this.state.register\r\n    fetch(\"/zek\",{\r\n      method:\"POST\",\r\n      body:JSON.stringify(register)\r\n    }).then((x) =>{ console.log(JSON.stringify( x )) })\r\n\r\n    fetch(\"/zek\",{\r\n      method:\"GET\"\r\n    }).then((test)=>{ console.log(JSON.stringify(test)) })\r\n\r\n    }\r\n  render(){\r\n\r\n    return(\r\n\r\n      \r\n    <div className=\"back\">\r\n      \r\n      <Menu select0={select}></Menu>\r\n\r\n        <div className=\"reg \">   \r\n          <form >\r\n            <label>\r\n              <p>Nome</p>\r\n              <input type=\"text\" maxLength=\"40\" onChange={ (event) => this.form(event,\"name\") }/>\r\n            </label>\r\n            <label>\r\n              <p>Senha</p>\r\n              <input type=\"password\" onChange={ (event) => this.form(event,\"password\") }/>\r\n            </label>\r\n            <label>\r\n              <p>Confirmar</p>\r\n              <input type=\"password\" />\r\n            </label>\r\n            <label>\r\n              <p>Celular</p>\r\n              <input type=\"text\" onChange={ (event) => this.form(event,\"telephone\") }/>\r\n            </label>\r\n            <label>\r\n              <p>Cidade</p>\r\n              <input type=\"text\" onChange={ (event) => this.form(event,\"city\") }/>\r\n            </label>\r\n            <input type=\"button\" value=\"Cadastrar\" onClick={this.invite} className=\"butt\"/>\r\n          </form>   \r\n        </div>\r\n\r\n    </div>\r\n \r\n    )\r\n  }\r\n}\r\n\r\nexport default Register;","import React, { Component } from 'react'\r\nimport Menu from '../Menu/Menu.js'\r\n\r\nconst style = {\r\n    color:'black'\r\n}\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        name: 'f',\r\n        password:'f1'\r\n    }\r\n\r\n    data = (event,space) => {\r\n        if(space===\"name\"){\r\n            this.setState({name: event.target.value });\r\n        }\r\n        if(space===\"password\"){\r\n            this.setState({ password: event.target.value });\r\n        }\r\n    }\r\n\r\n    submit = () => {\r\n        var log = this.state \r\n        fetch(\"/zek1\",{\r\n            method:\"POST\",\r\n            body:JSON.stringify(log)\r\n        }).then( (x) => { console.log(JSON.stringify(x)) })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"back\">\r\n                <Menu select1={style}></Menu>\r\n                <div className=\"reg \">   \r\n                    <form >\r\n                        <label>\r\n                            <p>Nome</p>\r\n                            <input type=\"text\" maxLength=\"40\" onChange={ (event) => this.data(event,\"name\") }/>\r\n                        </label>\r\n                        <label>\r\n                            <p>Senha</p>\r\n                            <input type=\"password\" onChange={ (event) => this.data(event,\"password\") }/>\r\n                        </label>\r\n                        <input type=\"button\" className=\"butt\" value=\"Entrar\" onClick={this.submit}/>\r\n                    </form>\r\n        </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './Pages/App.js';\nimport Register from './Pages/Register.js';\nimport Login from './Pages/Login.js'\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter>\n    <Switch>\n        <Route path=\"/\" component={App} exact/>\n        <Route path=\"/Register\" component={Register}/>\n        <Route path=\"/Login\" component={Login}/>\n    </Switch>\n</BrowserRouter>\n    \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}